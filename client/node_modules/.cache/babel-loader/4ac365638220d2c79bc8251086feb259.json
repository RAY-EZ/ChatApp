{"ast":null,"code":"var _jsxFileName = \"/Users/ray-ez/Desktop/strayChat/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const EndPoint = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(EndPoint);\n    setName(name);\n    setRoom(room); // Params : first is the event , second is the data we we want to pass, \n    //third is callback for error handling stuff \n\n    socket.emit('join', {\n      name,\n      room\n    }, () => {});\n    return () => {\n      // Emitting event name should be same on server side \n      socket.emit('disconnet');\n      socket.off();\n    };\n  }, [EndPoint, location.search]);\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }\n  }, \"Chat\");\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/ray-ez/Desktop/strayChat/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setName","room","setRoom","EndPoint","parse","search","emit","off"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,MAAJ;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMW,QAAQ,GAAG,gBAAjB;AAEAV,EAAAA,SAAS,CAAC,MAAI;AACV,UAAM;AAACM,MAAAA,IAAD;AAAOE,MAAAA;AAAP,QAAeP,WAAW,CAACU,KAAZ,CAAkBN,QAAQ,CAACO,MAA3B,CAArB;AAEAT,IAAAA,MAAM,GAAGD,EAAE,CAACQ,QAAD,CAAX;AACAH,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP,CALU,CAOV;AACA;;AACAL,IAAAA,MAAM,CAACU,IAAP,CAAY,MAAZ,EAAoB;AAACP,MAAAA,IAAD;AAAOE,MAAAA;AAAP,KAApB,EAAkC,MAAI,CAErC,CAFD;AAIA,WAAO,MAAI;AACP;AACAL,MAAAA,MAAM,CAACU,IAAP,CAAY,WAAZ;AAEAV,MAAAA,MAAM,CAACW,GAAP;AACH,KALD;AAMH,GAnBQ,EAmBN,CAACJ,QAAD,EAAWL,QAAQ,CAACO,MAApB,CAnBM,CAAT;AAqBA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,CA3BD;;AA6BA,eAAeR,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nlet socket;\nconst Chat = ({ location }) => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const EndPoint = 'localhost:5000';\n\n    useEffect(()=>{\n        const {name, room} = queryString.parse(location.search);\n\n        socket = io(EndPoint)\n        setName(name);\n        setRoom(room);\n\n        // Params : first is the event , second is the data we we want to pass, \n        //third is callback for error handling stuff \n        socket.emit('join', {name, room}, ()=>{\n\n        });\n        \n        return ()=>{\n            // Emitting event name should be same on server side \n            socket.emit('disconnet');\n            \n            socket.off();\n        }\n    }, [EndPoint, location.search]);\n\n    return(<h1>Chat</h1>)\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}