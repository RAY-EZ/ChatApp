{"ast":null,"code":"var _jsxFileName = \"/Users/ray-ez/Desktop/strayChat/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const EndPoint = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(EndPoint);\n    setName(name);\n    setRoom(room); // Params : first is the event , second is the data we we want to pass, \n    //third is callback for error handling stuff \n\n    socket.emit('join', {\n      name,\n      room\n    }, () => {});\n    return () => {\n      // Emitting event name should be same on server side \n      socket.emit('disconnet');\n      socket.off();\n    };\n  }, [EndPoint, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    }, [messages]);\n  });\n\n  const sendMessage = event => {\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(``));\n    }\n\n    event.preventDefault();\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: message,\n    onChange: event => setMessage(event.target.value),\n    onKeyPress: event => event.key === 'Enter' ? sendMessage() : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/ray-ez/Desktop/strayChat/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","EndPoint","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log","target","value","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,MAAJ;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMe,QAAQ,GAAG,gBAAjB;AAEAd,EAAAA,SAAS,CAAC,MAAI;AACV,UAAM;AAACM,MAAAA,IAAD;AAAOE,MAAAA;AAAP,QAAeP,WAAW,CAACc,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAArB;AAEAb,IAAAA,MAAM,GAAGD,EAAE,CAACY,QAAD,CAAX;AACAP,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP,CALU,CAOV;AACA;;AACAL,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoB;AAACX,MAAAA,IAAD;AAAOE,MAAAA;AAAP,KAApB,EAAkC,MAAI,CAErC,CAFD;AAIA,WAAO,MAAI;AACP;AACAL,MAAAA,MAAM,CAACc,IAAP,CAAY,WAAZ;AAEAd,MAAAA,MAAM,CAACe,GAAP;AACH,KALD;AAMH,GAnBQ,EAmBN,CAACJ,QAAD,EAAWT,QAAQ,CAACW,MAApB,CAnBM,CAAT;AAqBAhB,EAAAA,SAAS,CAAC,MAAK;AACXG,IAAAA,MAAM,CAACgB,EAAP,CAAU,SAAV,EAAsBT,OAAD,IAAW;AAC5BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACH,KAFD,EAEG,CAACE,QAAD,CAFH;AAGH,GAJQ,CAAT;;AAMA,QAAMQ,WAAW,GAAIC,KAAD,IAAS;AACzB,QAAGX,OAAH,EAAW;AACPP,MAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ,EAA2BP,OAA3B,EAAoC,MAAKC,UAAU,CAAE,EAAF,CAAnD;AACH;;AACDU,IAAAA,KAAK,CAACC,cAAN;AACH,GALD;;AAOAC,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ,EAAqBE,QAArB;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,KAAK,EAAEF,OAAd;AAAuB,IAAA,QAAQ,EAAIW,KAAD,IAAUV,UAAU,CAACU,KAAK,CAACI,MAAN,CAAaC,KAAd,CAAtD;AACA,IAAA,UAAU,EAAIL,KAAK,IAAIA,KAAK,CAACM,GAAN,KAAc,OAAd,GAAwBP,WAAW,EAAnC,GAAuC,IAD9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAQH,CAlDD;;AAoDA,eAAehB,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nlet socket;\nconst Chat = ({ location }) => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const EndPoint = 'localhost:5000';\n\n    useEffect(()=>{\n        const {name, room} = queryString.parse(location.search);\n\n        socket = io(EndPoint)\n        setName(name);\n        setRoom(room);\n\n        // Params : first is the event , second is the data we we want to pass, \n        //third is callback for error handling stuff \n        socket.emit('join', {name, room}, ()=>{\n\n        });\n        \n        return ()=>{\n            // Emitting event name should be same on server side \n            socket.emit('disconnet');\n            \n            socket.off();\n        }\n    }, [EndPoint, location.search]);\n\n    useEffect(()=> {\n        socket.on('message', (message)=>{\n            setMessages([...messages, message]);\n        }, [messages]);\n    });\n\n    const sendMessage = (event)=>{\n        if(message){\n            socket.emit('sendMessage', message, ()=> setMessage(``));\n        }\n        event.preventDefault();\n    }\n\n    console.log(message, messages);\n    return(\n        <div>\n            <input value={message} onChange={ (event)=> setMessage(event.target.value)} \n            onKeyPress= { event => event.key === 'Enter' ? sendMessage(): null}\n            />\n            \n        </div>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}